#!/usr/bin/python3
#+
# Calculator for screen parameters. Given any of the following,
# it will try to calculate the rest:
#
#     --aspect=h:w
#          aspect ratio, h and w integers, h being relative height, w relative width
#          e.g. widescreen landscape is 9:16, widescreen portrait is 16:9
#     --density=d
#          pixel density, in either dpi or dpcm, defaults to dpi.
#     --distance=s
#          optimal viewing distance below which individual pixels become visible,
#          assuming normal human visual acuity of one pixel per arc-minute.
#     --diagonal=s
#     --height=s
#     --width=s
#          screen diagonal, width, height, s being a number suffixed by either
#          “cm” or “in”.
#     --heightpx=n
#     --widthpx=n
#          screen height, width in integer pixels
#
# Combinations which will work are:
#     * any 2 of (aspect, diagonal, height, width) plus any 1 of
#       (density, distance, heightpx, widthpx)
#     * aspect + (density or distance) + (heightpx or widthpx)
#     * both of (heightpx, widthpx) and one of (density, distance)
# Discrepancies are not checked if you overspecify.
#
# Written by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

import sys
from functools import \
    reduce
import math
from fractions import \
    Fraction
import re
import getopt

aspect_figures = 2
cm_per_in = 2.54
pixel_angle = math.pi / 180 / 60
  # one arc-minute in radians, minimum angle between pixels distinguishable to typical human eye

acuity_factor = math.sqrt(2) / math.tan(pixel_angle)
  # sqrt(2) comes in to account for greater pixel spacing diagonally

def parse_measure(s, acceptable_units, default_unit = None) :
    # general routine for parsing a number suffixed by a unit specification.
    # acceptable_units is a dict mapping valid unit suffixes to corresponding
    # multiplication factors, which will be applied to the numeric part
    # of s before returning its value. If no unit suffix is found and
    # default_unit is not None, then the factor in acceptable_units corresponding
    # to default_unit will be applied. If there is no unit suffix and no
    # default_unit, then an error is raised.
    amt = re.match(r"([\d\.]+)", s)
    units = s[amt.end(1):].lower()
    amt = float(amt.group(1))
    if units != "" :
        if units in acceptable_units :
            factor = acceptable_units[units]
        else :
            raise getopt.GetoptError("unrecognized units “%s”" % units)
        #end if
    elif default_unit != None :
        factor = acceptable_units[default_unit]
    else :
        raise getopt.GetoptError("missing units: “%s”" % s)
    #end if
    return \
        amt * factor
#end parse_measure

def parse_aspect(s) :
    # parses a string of two decimal integers separated by a colon into a Fraction.
    num, denom = s.split(":", 1)
    return \
        Fraction(int(num), int(denom))
#end parse_aspect

def parse_int(s) :
    # parses a decimal integer string.
    return int(s)
#end parse_int

def parse_density(s) :
    # interprets a density specification, returning the corresponding dpcm value.
    return \
        parse_measure \
          (
            s = s,
            acceptable_units =
                {
                    "dpi" : 1 / cm_per_in,
                    "dpcm" : 1,
                    "dpm" : 0.01,
                },
            default_unit = "dpi"
          )
#end parse_density

def parse_distance(s) :
    # parses a a distance measure, accepting various unit suffixes,
    # returning the corresponding value in cm.
    return \
        parse_measure \
          (
            s = s,
            acceptable_units =
                {
                    "cm" : 1.0,
                    "mm" : 0.1,
                    "m" : 100,
                    "in" : cm_per_in,
                }
          )
#end parse_distance

aspect_diag = lambda f : math.hypot(f.numerator, f.denominator)

paramdefs = \
    { # keys are parameter names, values are dictionaries with following keys:
      #     "parse" : function to parse command-line string to value
      #     "calculate" : dictionary of ways to calculate parameter from other known parameters
      #          each key is a tuple of names of parameters which are known
      #              (ordered alphabetically, but this is not essential)
      #          corresponding value is a function of those parameter values in the same order
        "aspect" :
            {
                "parse" : parse_aspect,
                "calculate" :
                    {
                        ("height", "width") : lambda h, w : Fraction(round(h * 10 ** aspect_figures), round(w * 10 ** aspect_figures)).limit_denominator(10 ** aspect_figures),
                        ("heightpx", "widthpx") : lambda h, w : Fraction(h, w).limit_denominator(10 ** aspect_figures),
                    },
            },
        "density" :
            {
                "parse" : parse_density,
                "calculate" :
                    {
                        ("distance",) : lambda d : acuity_factor / d,
                        ("height", "heightpx") : lambda h, p : p / h,
                        ("width", "widthpx") : lambda w, p : p / w,
                    },
                "density" : True,
            },
        "diagonal" :
            {
                "parse" : parse_distance,
                "calculate" :
                    {
                        ("aspect", "height") : lambda a, h : h / a.numerator * aspect_diag(a),
                        ("aspect", "width") : lambda a, w : w / a.denominator * aspect_diag(a),
                        ("height", "width") : math.hypot,
                    },
                "distance" : True,
            },
        "distance" :
            {
                "parse" : parse_distance,
                "calculate" :
                    {
                        ("density",) : lambda s : acuity_factor / s,
                    },
                "distance" : True,
            },
        "height" :
            {
                "parse" : parse_distance,
                "calculate" :
                    {
                        ("aspect", "diagonal") : lambda a, d : d / aspect_diag(a) * a.numerator,
                        ("aspect", "width") : lambda a, w : w / a.denominator * a.numerator,
                        ("density", "heightpx") : lambda d, h : h / d,
                        ("diagonal", "width") : lambda d, w : math.sqrt(d * d - w * w),
                    },
                "distance" : True,
            },
        "heightpx" :
            {
                "parse" : parse_int,
                "calculate" :
                    {
                        ("aspect", "widthpx") : lambda a, w : w / a.denominator * a.numerator,
                        ("density", "height") : lambda d, h : int(h * d),
                    },
            },
        "width" :
            {
                "parse" : parse_distance,
                "calculate" :
                    {
                        ("aspect", "diagonal") : lambda a, d : d / aspect_diag(a) * a.denominator,
                        ("aspect", "height") : lambda a, h : h / a.numerator * a.denominator,
                        ("density", "widthpx") : lambda d, w : w / d,
                        ("diagonal", "height") : lambda d, h : math.sqrt(d * d - h * h),
                    },
                "distance" : True,
            },
        "widthpx" :
            {
                "parse" : parse_int,
                "calculate" :
                    {
                        ("aspect", "heightpx") : lambda a, h : h / a.numerator * a.denominator,
                        ("density", "width") : lambda d, w : int(w * d),
                    },
            },
    }

opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    list(k + "=" for k in paramdefs)
  )
if len(args) != 0 :
    raise getopt.GetoptError("not expecting any args")
#end if
params = dict((k, None) for k in paramdefs) # None indicates unspecified parameter value
for keyword, value in opts :
    if keyword.startswith("--") :
        param = keyword[2:]
        params[param] = paramdefs[param]["parse"](value)
    #end if
#end for
while True :
    # try to calculate all remaining unspecified parameter values
    did_one = False
    undone = set()
    for param in params :
        if params[param] == None :
            calculate = paramdefs[param]["calculate"]
            trycalc = iter(calculate.keys())
            while True :
                # try next way to calculate parameter value
                trythis = next(trycalc, None)
                if trythis == None :
                    # run out of ways
                    undone.add(param)
                    break
                #end if
                if (
                    reduce
                      (
                        lambda a, b : a and b,
                        (params[k] != None for k in trythis),
                        True
                      )
                ) :
                    # have all values needed to use this calculation
                    params[param] = calculate[trythis](*tuple(params[k] for k in trythis))
                    did_one = True
                    break
                #end if
            #end while
        #end if
    #end for
    if len(undone) == 0 or not did_one :
        break # all done, or can't make further progress
#end while
for param in sorted(params.keys()) :
    # show all known values
    paramdef = paramdefs[param]
    val = params[param]
    if val != None :
        if type(val) == int :
            sval = str(val)
        elif type(val) == Fraction :
            sval = "%d:%d" % (val.numerator, val.denominator)
        else :
            sval = "%.3f" % val
        #end if
        if paramdef.get("distance", False) :
            sval += "cm (%.3f in)" % (val / cm_per_in)
        elif paramdef.get("density", False) :
            sval += "dpcm (%d dpi)" % int(val * cm_per_in)
        #end if
        sys.stdout.write("%s = %s\n" % (param, sval))
    #end if
#end for
if len(undone) != 0 :
    sys.stdout.write("can’t figure out %s\n" % ",".join(sorted(undone)))
#end if
